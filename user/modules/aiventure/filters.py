from typing import *
import re

sentence_ends = [r'\.', r'\!', r'\?', r'"[^"]+"']
quote_classes = {'"': '“”', '\'': '`’'}


def get_last_sentence_end(text: str) -> int:
    """
    Finds the last sentence end in a given piece of text.

    :param text: The text to search.
    :return: The index of the last character in the last sentence end in the given text.
    """
    end = -1
    for e in sentence_ends:
        p_end = [m.end() for m in re.finditer(e, text)]
        end = max(end, p_end[-1] if len(p_end) > 0 else -1)
    return end


def remove_sentence_fragment(text: str) -> str:
    """
    Removes any dangling or incomplete sentences at the end of the given text.

    :param text: The text to process.
    :return: The processed text.
    """
    end = get_last_sentence_end(text)
    return text[:end + 1]


def formalize_quotes(text: str) -> str:
    """
    Ensures that all quotes used in a given text conform to the same type.

    :param text: The text to process.
    :return: The processed text.
    """
    for q, p in quote_classes.items():
        for c in p:
            text = re.sub(c, q, text)
    return text


def fix_end_quote(text: str):
    """
    Adds an ending quotation mark to the text if it wasn't generated by the AI.

    :param text: The text to process.
    :return: The processed text.
    """
    return (text + '"') if text.count('"') % 2 != 0 else text


def clean_white_space(text: str):
    """
    Cleans up whitespace.

    :param text: The text to process.
    :return: The processed text.
    """
    return re.sub(r' +', ' ', text)


def filter_input(text: str) -> str:
    """
    Default input filter.

    :param text: The input to filter.
    :return: Filtered input string.
    """
    return text.strip()


def filter_output(text: str) -> str:
    """
    Default output filter.

    :param text: The output to filter.
    :return: Filtered output string.
    """
    result = formalize_quotes(text).strip()
    result = remove_sentence_fragment(result).strip()
    result = fix_end_quote(result).strip()
    result = clean_white_space(result).strip()
    return result


def filter_display(story: List[str]) -> str:
    """
    Default display filter.

    :param story: The story to format.
    :return: Filtered display string. 
    Items which don't end on a proper sentence will be followed by a space,
    while items which do end in a proper sentence will be followed by a newline.
    """
    result = ''
    for i in range(0, len(story)):
        is_action = ((i + 1) % 2) == 0
        h = i - 1
        story_elem = story[i].strip()
        if len(story_elem) == 0:
            continue
        ref = 'c'
        if i > 0:
            ref = 'a' if is_action else 'r'
            ref += str(i - 1)
        story_elem = f'[ref={ref}]{story_elem}[/ref]'
        story_elem = f'[color=#ffff00]{story_elem}[/color]' if is_action else story_elem
        if h < 0:
            result += story_elem
        else:
            end = get_last_sentence_end(story[h])
            if end == len(story[h]):
                result += '\n\n' + story_elem
            else:
                result += ' ' + story_elem
    return result
